// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerifiedType {
  NONE
  PERSON
  ORGANIZATION
  GOVERNMENT
}

// Define the User schema
model User {
  id                  String       @id @unique @default(cuid())
  displayName         String
  handle              String       @unique
  bio                 String       @default("")
  private             Boolean      @default(false)
  verified            VerifiedType @default(NONE)
  completedOnboarding Boolean      @default(false)
  avatarUrl           String       @default("/assets/images/default-profile-picture.png")
  bannerUrl           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the relationships with other models
  posts Post[]    @relation("Author")
  auth  UserAuth?

  // Profile info
  websiteUrl String?
  location   String?
  jobTitle   String?
  birthday   DateTime?

  // Define counts
  postCount Int @default(0)
  followingCount Int @default(0)
  followersCount Int @default(0)

  UserFollowing     UserFollow[] @relation("UserFollowing") @ignore
  UserBeingFollowed UserFollow[] @relation("UserBeingFollowed") @ignore
}

// Define the UserAuth schema
model UserAuth {
  id     String @id @unique @default(cuid())
  user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
  email  String @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

// Define the UserFollow schema
model UserFollow {
  follower    User?  @relation("UserFollowing", fields: [followerId], references: [id])
  followerId  String
  following   User?  @relation("UserBeingFollowed", fields: [followingId], references: [id])
  followingId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

// Define the Post schema
model Post {
  id        String   @id @unique @default(cuid())
  author    User     @relation("Author", fields: [authorId], references: [id])
  authorId  String
  content   String
  mediaUrls String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedIds String[]

  comments   Post[]  @relation("CommentOf")
  parentPost Post?   @relation("CommentOf", fields: [parentId], references: [id])
  // TODO: rename to parentPostId
  parentId   String?
}
