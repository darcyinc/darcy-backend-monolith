enum ProfileDMPrivacy {
  PUBLIC
  ONLY_FOLLOWING
  NOBODY
}

enum ProfilePrivacy {
  PUBLIC
  PRIVATE
}

enum ProfileVerificationState {
  NONE
  VERIFIED
}

model User {
  id String @id @default(cuid())

  auth     UserAuth?
  sessions Session[]

  // Profile
  fullName  String
  handle    String  @unique
  bio       String? @db.VarChar(255)
  avatarUrl String?
  bannerUrl String?

  privacy           ProfilePrivacy           @default(PUBLIC)
  dmPrivacy         ProfileDMPrivacy         @default(PUBLIC)
  verificationState ProfileVerificationState @default(NONE)

  followers       UserFollow[] @relation("Followers")
  followersCount  Int          @default(0)
  following       UserFollow[] @relation("Following")
  followingCount  Int          @default(0)
  posts           Post[]       @relation("PostAuthor")
  postCount       Int          @default(0)
  commentsCount   Int          @default(0)
  likedPosts      PostLike[]
  likedPostsCount Int          @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([handle])
}

enum UserFollowState {
  COMPLETED
  // If the user has requested to follow the other user (private profile)
  PENDING
}

model UserFollow {
  follower   User   @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String

  target   User   @relation("Following", fields: [targetId], references: [id], onDelete: Cascade)
  targetId String

  state UserFollowState @default(COMPLETED)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([followerId, targetId])
}
